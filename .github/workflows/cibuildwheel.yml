name: Build

on:
  push:
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ ubuntu-24.04, ubuntu-24.04-arm, macos-14, macos-13, windows-latest ]  # Use specific versions for clarity
        arch: [ x86_64, arm64 ]
        exclude:
          - os: ubuntu-24.04-arm  # No need to specify arch, it's already implicit
            arch: x86_64  # Exclude x86_64 on ARM
          - os: macos-14   # Exclude macOS 14 (Sonoma)
            arch: x86_64   # Exclude x86_64 explicitly
          - os: macos-13  # Exclude macOS 13 (Ventura) - arm64
            arch: arm64   # Exclude arm64 on macOS 13

    steps:
      # See https://cibuildwheel.pypa.io/en/1.x/cpp_standards/
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/checkout@v4
      # This is crazy slow. We'll need to wait for arm Linux
      # runners.
      # aarch64 (arm) is built via qemu emulation on Linux
      #- name: Set up QEMU
      #  if: runner.os == 'Linux'
      #  uses: docker/setup-qemu-action@v3
      #  with:
      #    platforms: all
      - name: Debug env
        run: env
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          DISTUTILS_USE_SDK: 1
          MSSdk: 1
          AR: llvm-ar
          AS: llvm-as
          CC: clang
          RANLIB: echo
          CIBW_BUILD_VERBOSITY: 5
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
  create_release:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      actions: read
      issues: read
      packages: write
      pull-requests: read
      repository-projects: read
      statuses: read
    steps:
      - name: Get the tag name and determine if it's a prerelease
        id: get_tag_info
        run: |
          FULL_TAG=${GITHUB_REF#refs/tags/}
          if [[ $FULL_TAG == release-* ]]; then
            TAG_NAME=${FULL_TAG#release-}
            IS_PRERELEASE=false
          elif [[ $FULL_TAG == prerelease-* ]]; then
            TAG_NAME=${FULL_TAG#prerelease-}
            IS_PRERELEASE=true
          else
            echo "Tag does not match expected patterns" >&2
            exit 1
          fi
          echo "FULL_TAG=$TAG_NAME" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.TAG_NAME }}
          draft: true
          prerelease: ${{ env.IS_PRERELEASE }}
          files: "./dist/*" 
